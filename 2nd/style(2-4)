/*
element 하나하나의 개별적인 스타일링도 중요하지만 전체적인 element의 위치(layout)이 가장 중요
레이아웃 짜는 방법 중 하나인 플랙스 박스!!

flex container
flex item

flex는 각 아이템에 display 지정이 아니라 부모태그의 display 속성 지정
p 태그 선택해서 display:inline-block 이런 식으로 했었는데
flex는 각 자식이 display 지정이 아니라 flex-container에 display flex를 줌

display에는 더 많은 value 값들이 존재
*/

HTML
<div class="flex-container">
    <div class="flex-item">1</div>
    <div class="flex-item">2</div>
    <div class="flex-item">3</div>
    <div class="flex-item">4</div>
    <div class="flex-item">5</div>
    <div class="flex-item">6</div>
    <div class="flex-item">7</div>
    <div class="flex-item">8</div>
    <div class="flex-item">9</div>
    <div class="flex-item">10</div>
</div>

CSS
*{
    margin:0;
    padding:0;
    box-sizing: border-box;
} //전체 선택자로 마진, 패딩 없애기, 박스 사이징은 보더

.flex-container{
    background-color: teal;
    display: flex; //원래 위에서 아래로 정렬된게 인라인블럭처럼 좌우로 정렬, 플랙스 특징!!
    // flex item들이 가로로 정렬되는 이유? 현재 메인 axis가 가로라서!
    // 세로로 정렬하려면? main axis를 세로로 바꿔주기 -> flex-direction 사용 (기본값이 row)
    flex-direction: column; //세로로 바뀜 // row-reverse = 가로로 오->왼, column-reverse = 세로로 아래->위
}

.flex-item{
    background-color: tomato;
    width: 100px;
    height: 100px;
    border: 3px solid black;
    font-size: 30px;
    font-weight: bold;
} //글자크기랑 굵기 키워주고, 보더,높이,넓이 지정

/*
main axis : 수평, 수직 모두 가능/ 방향이 하나로 고정된 게 아님
cross axis : main의 반대/ main이 수평이면 수직, 수직이면 수평
*/


/*
justify content : main axis를 정렬하는 속성 , main이 가로축이라 가로축을 정렬

justify-content: flex-start // justify content는 flex-start가 기본값이라 (왼쪽정렬) 바뀌는 게 없음
min axis가 flex direction으로 바뀔 수 있기 때문에, 그냥 시작점에 붙여서 정렬되는 거라고 이해하는 게 덜 헷갈림

justify-content: flex-end; // 끝으로 정렬
justify-content: center; // 가운데 정렬
justify-content: space-between; // 양 옆 아이템은 그대로, 사이의 공백 똑같이 분배
justify-content: space-evenly; // 양 옆과 사이의 공백을 일정하게
    space-around; //모두 1:1이었던 evenly랑 다르게 양 옆에는 다른 아이템 사이의 공백의 반만 가져감

!! flex-container에 padding을 넣었다면, space-between을 해도 양 옆에 공백이 생길 수 있음
    이게 flex 때문이라 생겼다 생각하지 말고 개발자 속성을 켜서 뭐땜에 생긴건지 봐야함
*/



/*
align-item : cross axis를 정렬하는 속성, flex-start, flex-end, center, stretch, baseline
flex-container에 높이가 없어서 정렬할 필요가 없어서 아무런 변화가 없음
먼저 높이부터 넣어주기!

기본값이 stretch(부모의 높이 전체를 차지하기 위해 늘어놓는거)
*/
.flex-container{
    background-color: teal;
    display: flex;
    justify-content: space-between;
    align-item: center;
    height: 100vh; //view height(화면 전체의 높이), width에도 vw(view width)는 화면의 가로 넓이를 의미
}
/*
여기서는 안 늘어지는 이유가? flex-item에서 height를 지정해놨기 때문!
height를 주석처리하면 stretch 됨!
*/

//baseline은 text를 기준으로 정렬함.
.flex-item:nth-child(3){
    font-size:50px;
}
//50px로 가상선택자를 이용해서 키우면, text를 기준으로 정렬되는 걸 볼 수 있음

~~~> 부모 태그인 flex container에 써주는 속성들이었음!!



-------------------

각 flex-item에 써주는 속성들!
1. flex가 쓰이는 이유? 반응형 웹페이지에 최적화 되어있어서!
2. 이제 살필 속성을 이용해 각 item의 크기를 화면의 크기에 따라 조절도 가능

flex-grow를 쓰면, 공백들을 felx-item이 나눠가질 수 있음
flex-shrink는 줄어들 때, content 크기를 얼마나 줄일 것인지 결정

.flex-item:nth-child(4){
    flex-grow: 3;
    flex-shrink: 3;
}
.flex-item:nth-child(5){
    flex-grow: 2;
    flex-shrink: 2;
}

--> 크기가 커졌을때, 4,5번째가 같이 커지는 걸 볼 수 있음.
--> 4번째와 5번째 div가 다른 flex item들의 3,2배가 되는 게 아님.
    계산 방식? 
    기존의 flex item들이 각각 100씩 차지해서 div가 10개가 있으면, 1000이 됨.
    flex-container의 width가 1200이 되면 10개의 div가 들어가도 200의 공간이 남음
    그걸 4,5번째 div가 나눠 가지는 거임! 그 비율이 3:2

--> flex shrink도 마찬가지로 계산됨. 줄어든 크기만큼 이 아이템에서 빼는거임!
--> 단 flex-shrink는 기본값이 1임. 따로 지정해주지 않더라도 알아서 조금씩 줄어듦
    width를 늘릴때는 flex item들 크기는 변화가 없었는데
    width를 줄일때는 flex item이 다같이 축소됐던 이유


** flex-basis는 시작점을 말함. width를 설정해서 100px에서 시작해서 값을 계산했는데
    이건 width가 없을 때, width를 대신해서 flex-shrink와 flex-grow를 계산할 때, 시작점이 되어줌
    대부분 flex-item에 width를 설정하는 형식으로 씀

content 크기를 계속 유지하려면?(flex-container에 써야함) 
    flex-wrap : nowrap(기본), wrap(다음줄로 넘어감), wrap-reverse(wrap과 동일하지만 item이 끝점에서 시작점으로 정렬)

cross axis로 여러줄이 생길 때 쓸 수 있는 속성?
    align-content = align items + justify content
    (align-items와 justify-content에서 썼던 모든 값 사용 가능, 작동 방식도 모두 동일)

    align-items는 flex-wrap의 속성이 wrap일 때만 쓸 수 있음. cross axis가 멀티 라인일 때만 적용이 가능해서!

.flex-container{
    background-color: teal;
    display: flex;
    justify-content: space-between;
    align-item: baseline;
    height: 100vh; //view height(화면 전체의 높이), width에도 vw(view width)는 화면의 가로 넓이를 의미
    flex-wrap: wrap;
    align-content: space-evenly; //수직축에서 공백이 균등
}


** 많이 쓸 것? justify-content: center와 align-items: center일 거임!
    중앙 정렬 할 일이 굉장히 많을 거라서!!

    예시가 flex-direction이 row인 게 대부분이라서 flex-wrap이라던지, align-content가 flex-direction이 column일 때도, 살펴보면 좋을듯

    좀더 재밌게 하려면? flexboxfroggy.com에서 하면 좋음
    수련잎에 개구리를 flex로 넣는거!

    css diner라고 구글에 치면 바로 나올거임! flukeout.github.io
    선택자를 연습할 수 있는 사이트